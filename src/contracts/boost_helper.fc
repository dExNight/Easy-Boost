#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global int storage::claimed?;
global slice storage::boost_address;      ;; address of Boost
global slice storage::nft_address;      ;; address of the nft (MsgAddress)


() load_data() impure inline {
    slice ds = get_data().begin_parse();
    storage::claimed? = ds~load_uint(1);
    storage::boost_address = ds~load_msg_addr();
    storage::nft_address = ds~load_msg_addr();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_uint(storage::claimed?, 1)
            .store_slice(storage::boost_address)
            .store_slice(storage::nft_address)
        .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    load_data();

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    throw_unless(exc::incorrect_sender, equal_slices(storage::boost_address, sender_address));

    if (op == op::claim_boost_rewards) {
        throw_if(storage::claimed?, exc::already_claimed);
        ;; TODO: process claim
    }

    throw(0xffff);
}

(int, slice, slice) get_helper_data() method_id {
    load_data();
    return (storage::claimed?, storage::boost_address, storage::nft_address);
}
